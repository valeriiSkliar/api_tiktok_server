// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//=============================================================================
// Authentication & Session Models
//=============================================================================
model Session {
  id                    Int           @id @default(autoincrement())
  tiktokAccountId       Int
  proxyId               Int
  apiConfigId           Int
  sessionData           Json
  createdAt             DateTime      @default(now())
  expiresAt             DateTime
  lastActivityTimestamp DateTime?
  isValid               Boolean       @default(true)
  status                String

  // Relations
  tiktokAccount        TikTokAccount @relation("has", fields: [tiktokAccountId], references: [id])
  proxy                Proxy         @relation("used_by", fields: [proxyId], references: [id])
  apiConfig            ApiConfiguration @relation("applies_to", fields: [apiConfigId], references: [id])
  requests             Request[]      @relation("processes")

  @@index([isValid])
  @@index([status])
  @@index([lastActivityTimestamp])
  @@index([tiktokAccountId])
  @@index([proxyId])
  @@index([apiConfigId])
}

model Cache {
  id                    Int           @id @default(autoincrement())
  requestHash           String
  responseData          Json
  createdAt             DateTime      @default(now())
  expiresAt             DateTime
  hitCount              Int
  lastAccessedAt        DateTime?
  requestId             Int?          @unique  // Foreign key for one-to-one relation

  // Relations
  request              Request?       @relation("stores_result_of", fields: [requestId], references: [id])

  @@index([requestHash])
  @@index([expiresAt])
  @@index([lastAccessedAt])
}

model Request {
  id                    Int           @id @default(autoincrement())
  externalRequestId     String
  requestType           String
  parameters            Json
  createdAt             DateTime      @default(now())
  processedAt           DateTime?
  status                String
  sessionId             Int
  responseData          Json?
  errorDetails          String?
  priority              Int
  retryCount            Int
  webhookUrl            String?

  // Relations
  session              Session        @relation("processes", fields: [sessionId], references: [id])
  cache                Cache?         @relation("stores_result_of")
  activities           ActivityLog[]  @relation("generates")

  @@index([status])
  @@index([processedAt])
  @@index([sessionId])
}

//=============================================================================
// Account Management Models
//=============================================================================

// Модель для хранения аккаунтов TikTok
model TikTokAccount {
  id                    Int           @id @default(autoincrement())
  username              String        @unique
  password              String
  emailId               Int
  status                String
  lastLoginTimestamp    DateTime?
  creationDate          DateTime      @default(now())
  notes                 String?       @db.Text
  verificationRequired  Boolean       @default(false)
  
  // Additional useful fields from existing model
  isActive             Boolean       @default(true)
  lastAuthSuccess      DateTime?     @default(now())
  updatedAt            DateTime      @updatedAt
  
  // Relations
  emailAccount         Email         @relation(fields: [emailId], references: [id])
  activities           ActivityLog[] @relation("tiktok_has_activities")
  sessions            Session[]     @relation("has")

  @@index([isActive])
  @@index([username])
  @@index([emailId])
}

model Email {
  id                  Int           @id @default(autoincrement())
  emailAddress        String        @unique
  provider            String
  connectionDetails   Json?
  username            String
  password            String
  status              String
  lastCheckTimestamp  DateTime?
  isAssociated        Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  activities         ActivityLog[]   @relation("email_has_activities")
  TikTokAccount      TikTokAccount[]

  @@index([isAssociated])
  @@index([status])
  @@index([lastCheckTimestamp])
}


//=============================================================================
// Infrastructure Models
//=============================================================================
model ApiConfiguration {
  id                    Int           @id @default(autoincrement())
  apiVersion            String
  parameters            Json
  updatedAt             DateTime      @updatedAt
  isActive              Boolean       @default(true)
  updateFrequency       Int

  // Relations
  sessions             Session[]     @relation("applies_to")

}

model Proxy {
  id                    Int           @id @default(autoincrement())
  address               String
  port                  Int
  username              String?
  password              String?
  proxyType             String
  status                String
  lastCheckTimestamp    DateTime?
  successRate           Float
  averageResponseTime   Int
  country               String
  provider              String
  notes                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  sessions             Session[]     @relation("used_by")
  activities           ActivityLog[] @relation("proxy_has_activities")

  @@index([status])
  @@index([lastCheckTimestamp])
}

//=============================================================================
// Request Handling Models
//=============================================================================


//=============================================================================
// Email Verification Models
//=============================================================================

model EmailVerificationCode {
  id           Int      @id @default(autoincrement())
  code         String
  emailId     Int
  tiktokAccountId Int
  messageId    String
  senderEmail  String
  receivedAt   DateTime @default(now())
  emailBody    String?  @db.Text
  status       EmailVerificationStatus @default(UNUSED)
  usedAt       DateTime?
  additionalInfo String? @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([code, messageId])
  @@index([status])
}

enum EmailVerificationStatus {
  UNUSED
  USED
}


//=============================================================================
// Activity Logging Models
//=============================================================================

model ActivityLog {
  id        Int        @id @default(autoincrement())
  timestamp DateTime   @default(now())
  entityType String
  entityId   Int
  actionType String
  details    Json?
  severity   String
  relatedRequestId Int?
  emailId    Int?     // Foreign key for Email relation
  tiktokId   Int?     // Foreign key for TikTokAccount relation
  requestId  Int?     // Foreign key for Request relation
  proxyId    Int?     // Foreign key for Proxy relation
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations with unique constraint names
  email          Email?          @relation("email_has_activities", fields: [emailId], references: [id])
  tiktokAccount  TikTokAccount?  @relation("tiktok_has_activities", fields: [tiktokId], references: [id])
  request        Request?        @relation("generates", fields: [requestId], references: [id])
  proxy          Proxy?          @relation("proxy_has_activities", fields: [proxyId], references: [id])

  @@index([entityType, entityId])
  @@index([relatedRequestId])
  @@index([emailId])
  @@index([tiktokId])
  @@index([requestId])
  @@index([proxyId])
}


//=============================================================================
// Search Models
//=============================================================================

model SearchRequest {
  id        Int        @id @default(autoincrement())
  query     Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

//=============================================================================
// Statistics Models
//=============================================================================

model Statistics {
  id                    Int           @id @default(autoincrement())
  date                  DateTime
  requestCount          Int
  successCount          Int
  failureCount          Int
  averageResponseTime   Float
  cacheHitRate          Float
  blockedSessionCount   Int
  details               Json

  @@index([date])
}
